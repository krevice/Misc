import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import requests
from bs4 import BeautifulSoup
from matplotlib.ticker import FuncFormatter
import matplotlib.ticker as ticker

# Dictionary to map team names to their respective colors
mlb_team_colors = {
    'Arizona Diamondbacks': '#A71930',  # Sedona Red
    'Atlanta Braves': '#CF1141',       # Braves Red
    'Baltimore Orioles': '#DF4601',    # Orange
    'Boston Red Sox': '#C60C30',       # Red Sox Red
    'Chicago White Sox': '#000000',    # Black
    'Chicago Cubs': '#0E3386',         # Cubs Blue
    'Cincinnati Reds': '#C6011F',      # Reds Red
    'Cleveland Guardians': '#002144',  # Navy
    'Colorado Rockies': '#220F5D',     # Rockies Purple
    'Detroit Tigers': '#062343',       # Tigers Navy
    'Houston Astros': '#E57200',       # Astros Orange
    'Kansas City Royals': '#002C74',   # Royals Blue
    'Los Angeles Angels': '#B90020',   # Angels Red
    'Los Angeles Dodgers': '#223B75',  # Dodgers Blue
    'Miami Marlins': '#0783C9',        # Miami Blue
    'Milwaukee Brewers': '#162B48',    # Brewers Gold
    'Minnesota Twins': '#B41234',      # Twins Navy
    'New York Yankees': '#001C43',     # Yankees Navy
    'New York Mets': '#FF4A00',        # Mets Orange
    'Oakland Athletics': '#003831',    # Athletics Green
    'Philadelphia Phillies': '#D41244',# Phillies Red
    'Pittsburgh Pirates': '#FCB827',   # Pirates Gold
    'San Diego Padres': '#2F241D',     # Padres Brown
    'San Francisco Giants': '#FD5A1E', # Giants Orange
    'Seattle Mariners': '#0C2C56',     # Mariners Navy
    'St. Louis Cardinals': '#C41E3A',  # Cardinals Red
    'Tampa Bay Rays': '#8FBCE6',       # Rays Blue
    'Texas Rangers': '#003278',        # Rangers Blue
    'Toronto Blue Jays': '#134A8E',    # Blue Jays Blue
    'Washington Nationals': '#AB0003'  # Nationals Red
}

# Step 1: Web scraping MLB payroll data
url = 'https://www.spotrac.com/mlb/payroll/'
response = requests.get(url)
soup = BeautifulSoup(response.content, 'lxml')
payroll_table = soup.find_all('table')
payroll_df = pd.read_html(str(payroll_table))[0]

# Step 2: Data preprocessing for payroll data
# Sort the DataFrame by 'Team' column
# Filter out the 'League Average' row
# Select only the 'Team' and '2023 Total Payroll' columns
# Reset the index for the DataFrame
payroll_df = payroll_df.sort_values(by='Team')
payroll_df = payroll_df[payroll_df['Team'] != 'League Average']
payroll_df = payroll_df[['Team', '2023 Total Payroll']]
payroll_df = payroll_df.reset_index()

# Step 3: Load team performance data from a CSV file
# Most up-to-date CSV file is generated by running TeamData.py
team_df = pd.read_csv('team_df.csv')
team_df = team_df[['Tm', 'W-L%']]
team_df = team_df.sort_values(by='Tm')
team_df = team_df.reset_index()

# Step 4: Merging payroll and team performance dataframes
# Concatenate the payroll_df and team_df DataFrames horizontally based on index
df = pd.concat([payroll_df, team_df], axis=1)
df = df[['Tm', 'W-L%', '2023 Total Payroll']]

# Step 5: Data preparation and cleanup
# Remove the '$' symbol and commas from the '2023 Total Payroll' column
# Convert the '2023 Total Payroll' column to numeric
df['2023 Total Payroll'] = df['2023 Total Payroll'].str.replace('[$,]', '', regex=True)
df['2023 Total Payroll'] = pd.to_numeric(df['2023 Total Payroll'])

# Step 6: Calculate statistics
# Calculate the average payroll and standard deviation of payrolls
average_payroll = df['2023 Total Payroll'].mean()
payroll_std_deviation = df['2023 Total Payroll'].std()

# Step 7: Data visualization using seaborn and matplotlib
# Create a scatter plot with team payroll on the x-axis and winning percentage on the y-axis
# Use the 'mlb_team_colors' dictionary to assign team-specific colors to data points
sns.scatterplot(df, x='2023 Total Payroll', y='W-L%', hue='Tm', palette=mlb_team_colors, legend=False, s=100)

# Step 8: Add team labels to the scatter plot
for line in range(len(df)):
    # Add text labels for each data point to represent the team names
    plt.text(df['2023 Total Payroll'][line],
             df['W-L%'][line],
             df['Tm'][line],
             horizontalalignment='left',
             verticalalignment='bottom',
             fontsize='small',
             color='black',
             fontweight='semibold',
             # Use a rounded boxstyle with transparency for better visibility
             **{'bbox': dict(boxstyle='round, pad=0.3', edgecolor='none', facecolor='none', alpha=0.5)}
             )

# Step 9: Draw vertical and horizontal lines to create four quadrants
# Horizontal line at W-L% = 0.5
plt.axhline(0.5, color='gray', linestyle='--')
# Vertical line at 1 standard deviation above the payroll mean
plt.axvline(average_payroll + payroll_std_deviation, color='gray', linestyle='--')

# Step 10: Add quadrant titles to the plot
quadrant_titles = ['Buying wins', 'Moneyball geniuses', 'Sell the team', 'Ya dun goofed']
title_coords = {
    'Buying wins': (0.8, 0.95),
    'Moneyball geniuses': (0.1, 0.95),
    'Sell the team': (0.1, 0.15),
    'Ya dun goofed': (0.8, 0.15)
}
for quadrant in quadrant_titles:
    # Add quadrant titles to the specified coordinates with custom formatting
    plt.text(title_coords[quadrant][0], title_coords[quadrant][1], quadrant,
             fontsize=18, fontweight='bold', color='red', ha='center', va='center', transform=plt.gca().transAxes,
             # Use a white background with transparency for better readability
             bbox=dict(facecolor='white', alpha=0.8))

# Step 11: Format y-axis to display three decimals
y_format = ticker.FormatStrFormatter('%.3f')
plt.gca().yaxis.set_major_formatter(y_format)

# Convert the x-axis values to millions with one decimal point and add '$' symbol
plt.gca().xaxis.set_major_formatter(FuncFormatter(lambda x, pos: f"${x/1e6:.1f}M"))

# Step 13: Set axis labels and title
# Set the labels for the x and y axes along with the plot title
plt.xlabel("2023 Total Payroll", fontsize=16, fontweight='bold')
plt.ylabel("Winning %", fontsize=16, fontweight='bold')
plt.title("What Record has Your Team's Ownership Bought?", fontsize=18, fontweight='bold')

# Step 14: Display the plot
plt.show()
